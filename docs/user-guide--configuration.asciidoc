ifndef::basebackend-docbook[]

= User Guide
:description: Configuring PHP Reflect
include::revision.asciidoc[]
include::attributes.asciidoc[]

endif::basebackend-docbook[]

== The Json Configuration File

[WARNING]
====
[label label-primary]#Reflect# may used an optional config file in http://json.org/[JSON] format.
It could be found either in the current, `$HOME/.config/`, or `/etc` directory.

By setting the `BARTLETTRC` environment variable it is possible to set the filename
of `phpreflect.json` to something else.

E.g:  `BARTLETTRC=my-phpreflect.json`

And by setting the `BARTLETT_SCAN_DIR` environment variable it is possible to change
directories where to search for the json config file.

E.g:  `BARTLETT_SCAN_DIR=.:/var/configs:/tmp/bartlett`  (for Linux)

E.g:  `BARTLETT_SCAN_DIR=.;\var\configs;\tmp\bartlett`  (for Windows)

Take care of different PATH_SEPARATOR and DIRECTORY_SEPARATOR in each platform.
====

The minimalist JSON file +phpreflect.json+ is :
[source,json]
----
{
    "source-providers": [
        {
            "in": ". as current",
            "name": "/\\.(php|inc|phtml)$/"
        }
    ],
    "plugins": [
    ],
    "analysers": [
    ],
    "services": [
    ]
}
----

source-providers::
this entry provide list of your data sources to parse.

plugins::
this entry list all plugins added to the core base code of PHP [label label-primary]#Reflect#.

analysers::
this entry list all analysers that may be used with the `analyser:run` command.

services::
this entry list all services that may be used with this application.


=== section Source Providers

[role="lead"]
There are lot of way to filter your data source. Each rule follow the syntax
of Symfony http://symfony.com/doc/current/components/finder.html[Finder] Component.

The *Location* is the only mandatory criteria. It tells the Finder which directory to use for the search.

[source,json]
.In a simple directory
----
    {
        "in": ". as current"
    }
----

NOTE: If you want to identify a data source easily by a short name, the alias (right of `as`)
is compared with the +--alias+ option constraint.

[source,json]
.Search in several locations
----
    {
        "in": ". as current",
        "in": "src/"
    }
----

[source,json]
.Use wildcard characters to search in the directories matching a pattern:
----
    {
        "in": "src/Bartlett/R*"
    }
----

[source,json]
.Search directly in archives (phar, zip, tar) with the +phar://+ protocol
----
    {
        "in": "phar://path/to/archive.zip"
    }
----

[source,json]
.Restrict files by *name* and/or extension.
----
    {
        "in": "phar://path/to/archive.zip",
        "name": "*.php"
    }
----

[source,json]
.Restrict files by *size*.
----
    {
        "in": "phar://path/to/archive.zip",
        "name": "*.php",
        "size": "< 10K"
    }
----

[source,json]
.Restrict files by last modified dates.
----
    {
        "in": ". as current",
        "date": "since yesterday"
    }
----

By default, the Finder recursively traverse directories.

[source,json]
.Restrict the depth of traversing.
----
    {
        "in": ". as current",
        "depth": "< 3"
    }
----

[source,json]
.Restrict location by only one directory.
----
    {
        "in": ". as current",
        "exclude": "vendor"
    }
----

[source,json]
.Restrict location by 1 or more directories.
----
    {
        "in": ". as current",
        "exclude": ["vendor", "tests"]
    }
----


=== section Plugins

[role="lead"]
There are a number of optional plugins you can use along with Reflect to add more capabilities.

Take an example with the `Logger` plugin.

In your +phpreflect.json+ configuration file, add in `plugins` section the following entry:
[source,json]
----
    {
        "name": "Logger",
        "class": "Bartlett\\Reflect\\Plugin\\LogPlugin"
    }
----

* The `name` key is (since version 3.0.0-alpha1) comment only.
* The `class` key identify the name of the class that implement the plugin features (must be fully qualified).

NOTE: The `LogPlugin` used by default the `Bartlett\Reflect\Plugin\Log\DefaultLogger` class that write results to error_log 

==== Cache Plugin

WARNING: Available since version 2.3.0, but location changed since version 3.0.0-alpha1

In your +phpreflect.json+ configuration file, add in `plugins` section the following entry:
[source,json]
----
    {
        "name": "Cache",
        "class": "Bartlett\\Reflect\\Plugin\\CachePlugin",
        "options": {
            "adapter": "DoctrineCacheAdapter",
            "backend": {
                "class": "Doctrine\\Common\\Cache\\FilesystemCache",
                "args": [
                    "%{TEMP}/bartlett/cache"
                ]
            }
        }
    }
----
TIP: You may use any environment variable that will be replaced, at run-time, by their value. E.g: `TEMP`, `HOME`

NOTE: Since release 2.3.0, the `HOME` syntax is compatible Linux/Windows.

[TIP]
====
If you want to used the same options (Doctrine adapter with file cache) as above, 
you can used shortcut syntax like this.
[source,json]
----
    {
        "name": "Cache",
        "class": "Bartlett\\Reflect\\Plugin\\CachePlugin",
        "options": []
    }
----
====

In previous configuration we used the Doctrine Cache adapter and its File system backend.
See the same configuration applied with other SAPI, in
ifdef::basebackend-html[]
link:developer-guide&#45;&#45;cache-plugin.html#_file_cache[developer guide]
endif::basebackend-html[]
ifdef::basebackend-docbook[]
xref:_file_cache[]
endif::basebackend-docbook[]


==== Log Plugin

WARNING: Available since version 2.4.0, but location and options changed since version 3.0.0-alpha1

In your +phpreflect.json+ configuration file, add in `plugins` section the following entry:
[source,json]
----
    {
        "name": "Log",
        "class": "Bartlett\\Reflect\\Plugin\\LogPlugin"
    }
----
Where `options` key identify an optional class logger (fully qualified. E.g `YourNamespace\YourLogger`).

When `options` key is not provided, log plugin used the default Reflect logger bundled with distribution.
See `Bartlett\Reflect\Plugin\Log\DefaultLogger` that write results to the error log system.

See the Developer Guide for definition examples of some loggers
ifdef::basebackend-html[]
link:developer-guide&#45;&#45;log-plugin.html#_using_your_private_logger[using private logger] or
link:developer-guide&#45;&#45;log-plugin.html#_using_monolog[using monolog]
endif::basebackend-html[]
ifdef::basebackend-docbook[]
xref:_using_your_private_logger[] or
xref:_using_monolog[]
endif::basebackend-docbook[]


=== section Analysers

[role="lead"]
There are two default analysers you can use, but you are free to add your owns.

In your +phpreflect.json+ configuration file, add in `analysers` section (for example) the following entry:
[source,json]
----
    {
        "name": "MyAnalyser",
        "class": "Your\\Analysers\\MyAnalyser"
    }
----

* The `name` key is (since version 3.0.0-alpha1) comment only.
* The `class` key identify the name of the class that implement your analyser (must be fully qualified).

Your analyser should implement both interfaces `Bartlett\Reflect\Analyser\AnalyserInterface` 
and `PhpParser\NodeVisitor`.

Then to use it in command line :

[source,bash]
----
$ phpreflect analyser:run /path/to/datasource my
----
NOTE: `my` identify your analyser (prefix in lower case of `MyAnalyser` class) 


ifdef::basebackend-bootstrap[]
== Next

link:user-guide&#45;&#45;commands.html["The Command-Line Interface",role="primary",icon="glyphicon-step-forward",options="block"]

************************************************
.Read more

For developers who want to extend or change Reflect features.

* Want to create a new plugin,
have a look on developer's guide in the link:developer-guide&#45;&#45;plugins.html[Plugins] section.

* Want to create a new analyser,
have a look on developer's guide in the link:developer-guide&#45;&#45;analysers.html[Analysers] section.

************************************************
endif::[]
